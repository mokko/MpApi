from MpApi.Helper import Helper as Helper
from typing import Any, Iterator, Union
from typing_extensions import TypeAlias

dataTypes: Any
NSMAP: Any
parser: Any
ET: TypeAlias
intNone = Union[int, None]
strNone = Union[str, None]

class Module(Helper):
    etree: Any
    def __init__(self, *, file: str = ..., tree: ET = ..., xml: str = ...) -> None: ...
    def addDocument(self, doc: ET) -> None: ...
    def dataField(self, parent: ET, name: str, *, dataType: str = ..., value: str = ...) -> ET: ...
    def describe(self) -> dict: ...
    def dropUUID(self, parent: Any | None = ...) -> None: ...
    def dropRepeatableGroup(self, name, *, parent: Any | None = ...) -> None: ...
    def iter(self, *, module: str = ...) -> Iterator: ...
    def module(self, name: str) -> ET: ...
    def moduleItem(self, parent: ET, ID: int, *, hasAttachments: strNone = ...) -> ET: ...
    def moduleReference(self, parent: ET, name: str, *, targetModule: strNone = ..., multiplicity: strNone = ...) -> ET: ...
    def repeatableGroup(self, parent: ET, name: str, *, size: int = ...): ...
    def repeatableGroupItems(self, parent: ET): ...
    def repeatableGroupItemAdd(self, parent: ET, *, ID: intNone = ...): ...
    def totalSize(self, module: str) -> intNone: ...
    def totalSizeUpdate(self) -> None: ...
    def vocabularyReference(self, parent: ET, name: str, instanceName: str, *, ID: int = ...) -> ET: ...
    def vocabularyReferenceItem(self, parent: ET, name: str, *, ID: int = ...) -> ET: ...
    def __iter__(self) -> ET: ...
