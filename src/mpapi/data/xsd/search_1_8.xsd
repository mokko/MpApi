<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.zetcom.com/ria/ws/module/search" xmlns="http://www.zetcom.com/ria/ws/module/search" elementFormDefault="qualified" version="1.8">

    <xs:element name="application" type="Application"/>

    <xs:complexType name="Application">
        <xs:sequence>
            <xs:element name="modules" type="Modules" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Modules">
        <xs:sequence>
            <xs:element name="module" type="Module" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Module">
        <xs:sequence>
            <xs:element name="search" type="Search" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="name" type="Name" use="required"/>
    </xs:complexType>

    <xs:simpleType name="Name">
        <xs:restriction base="xs:string">
            <xs:pattern value="[a-zA-Z_][a-zA-Z0-9_$]*"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="Search">
        <xs:sequence>
            <xs:element name="select" type="Select" minOccurs="0" maxOccurs="1"/>
            <xs:element name="sort" type="Sort" minOccurs="0" maxOccurs="1"/>
            <xs:element name="fulltext" type="FulltextSearchExpression" minOccurs="0" maxOccurs="1"/>
            <xs:element name="expert" type="ExpertSearchExpression" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="offset" type="xs:long" default="0"/>
        <xs:attribute name="limit" type="xs:long" default="-1"/>
        <xs:attribute name="loadThumbnailExtraSmall" type="xs:boolean" default="false"/>
        <xs:attribute name="loadThumbnailSmall" type="xs:boolean" default="false"/>
        <xs:attribute name="loadThumbnailMedium" type="xs:boolean" default="false"/>
        <xs:attribute name="loadThumbnailLarge" type="xs:boolean" default="false"/>
        <xs:attribute name="loadThumbnailExtraLarge" type="xs:boolean" default="false"/>
        <xs:attribute name="loadAttachment" type="xs:boolean" default="false"/>
        <xs:attribute name="trashBin" type="TrashBinHandling" default="NotIncluded"/>
        <xs:attribute name="template" type="TemplateHandling" default="NotIncluded"/>
    </xs:complexType>

    <xs:simpleType name="TrashBinHandling">
        <xs:restriction base="xs:string">
            <xs:enumeration value="NotIncluded"/>
            <xs:enumeration value="Included"/>
            <xs:enumeration value="Exclusive"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="TemplateHandling">
        <xs:restriction base="xs:string">
            <xs:enumeration value="NotIncluded"/>
            <xs:enumeration value="Included"/>
            <xs:enumeration value="Exclusive"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="Select">
        <xs:sequence>
            <xs:element name="field" type="SelectField" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="SelectField">
        <xs:attribute name="fieldPath" type="Path"/>
    </xs:complexType>

    <xs:complexType name="Sort">
        <xs:sequence>
            <xs:element name="field" type="SortField" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="SortField">
        <xs:attribute name="fieldPath" type="Path"/>
        <xs:attribute name="direction" type="Direction" default="Ascending"/>
    </xs:complexType>

    <xs:simpleType name="Direction">
        <xs:restriction base="xs:string">
            <xs:enumeration value="Ascending"/>
            <xs:enumeration value="Descending"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="FulltextSearchExpression">
        <xs:simpleContent>
            <xs:extension base="xs:string"/>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="ExpertSearchExpression">
        <xs:choice>
            <xs:element name="and" type="And"/>
            <xs:element name="or" type="Or"/>
            <xs:element name="not" type="Not"/>
            <xs:element name="betweenIncl" type="BetweenIncl"/>
            <xs:element name="betweenExcl" type="BetweenExcl"/>
            <xs:element name="contains" type="Contains"/>
            <xs:element name="containsExact" type="ContainsExact"/>
            <xs:element name="endsWithField" type="EndsWithField"/>
            <xs:element name="endsWithTerm" type="EndsWithTerm"/>
            <xs:element name="equalsField" type="EqualsField"/>
            <xs:element name="equalsExact" type="EqualsExact"/>
            <xs:element name="equalsVocNodeExcludingHierarchy" type="EqualsVocNodeExcludingHierarchy"/>
            <xs:element name="equalsTerm" type="EqualsTerm"/>
            <xs:element name="equalsIncludeTransitiveReference" type="EqualsIncludeTransitiveReference"/>
            <xs:element name="greater" type="Greater"/>
            <xs:element name="greaterEquals" type="GreaterEquals"/>
            <xs:element name="isNotNull" type="IsNotNull"/>
            <xs:element name="isNull" type="IsNull"/>
            <xs:element name="isNotBlank" type="IsNotBlank"/>
            <xs:element name="isBlank" type="IsBlank"/>
            <xs:element name="less" type="Less"/>
            <xs:element name="lessEquals" type="LessEquals"/>
            <xs:element name="notEqualsField" type="NotEqualsField"/>
            <xs:element name="notEqualsVocNodeExcludingHierarchy" type="NotEqualsVocNodeExcludingHierarchy"/>
            <xs:element name="notEqualsTerm" type="NotEqualsTerm"/>
            <xs:element name="startsWithField" type="StartsWithField"/>
            <xs:element name="startsWithTerm" type="StartsWithTerm"/>
            <xs:element name="exists" type="Exists"/>
            <xs:element name="forAll" type="ForAll"/>
        </xs:choice>
        <xs:attribute name="module" type="xs:string" use="optional"/>
    </xs:complexType>

    <xs:complexType name="Or">
        <xs:sequence>
            <xs:choice minOccurs="2" maxOccurs="unbounded">
                <xs:element name="and" type="And"/>
                <xs:element name="or" type="Or"/>
                <xs:element name="not" type="Not"/>
                <xs:element name="betweenIncl" type="BetweenIncl"/>
                <xs:element name="betweenExcl" type="BetweenExcl"/>
                <xs:element name="contains" type="Contains"/>
                <xs:element name="containsExact" type="ContainsExact"/>
                <xs:element name="endsWithField" type="EndsWithField"/>
                <xs:element name="endsWithTerm" type="EndsWithTerm"/>
                <xs:element name="equalsField" type="EqualsField"/>
                <xs:element name="equalsExact" type="EqualsExact"/>
                <xs:element name="equalsVocNodeExcludingHierarchy" type="EqualsVocNodeExcludingHierarchy"/>
                <xs:element name="equalsTerm" type="EqualsTerm"/>
                <xs:element name="equalsIncludeTransitiveReference" type="EqualsIncludeTransitiveReference"/>
                <xs:element name="greater" type="Greater"/>
                <xs:element name="greaterEquals" type="GreaterEquals"/>
                <xs:element name="isNotNull" type="IsNotNull"/>
                <xs:element name="isNull" type="IsNull"/>
                <xs:element name="isNotBlank" type="IsNotBlank"/>
                <xs:element name="isBlank" type="IsBlank"/>
                <xs:element name="less" type="Less"/>
                <xs:element name="lessEquals" type="LessEquals"/>
                <xs:element name="notEqualsField" type="NotEqualsField"/>
                <xs:element name="notEqualsVocNodeExcludingHierarchy" type="NotEqualsVocNodeExcludingHierarchy"/>
                <xs:element name="notEqualsTerm" type="NotEqualsTerm"/>
                <xs:element name="startsWithField" type="StartsWithField"/>
                <xs:element name="startsWithTerm" type="StartsWithTerm"/>
                <xs:element name="exists" type="Exists"/>
                <xs:element name="forAll" type="ForAll"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="And">
        <xs:sequence>
            <xs:choice minOccurs="2" maxOccurs="unbounded">
                <xs:element name="and" type="And"/>
                <xs:element name="or" type="Or"/>
                <xs:element name="not" type="Not"/>
                <xs:element name="betweenIncl" type="BetweenIncl"/>
                <xs:element name="betweenExcl" type="BetweenExcl"/>
                <xs:element name="contains" type="Contains"/>
                <xs:element name="containsExact" type="ContainsExact"/>
                <xs:element name="endsWithField" type="EndsWithField"/>
                <xs:element name="endsWithTerm" type="EndsWithTerm"/>
                <xs:element name="equalsField" type="EqualsField"/>
                <xs:element name="equalsExact" type="EqualsExact"/>
                <xs:element name="equalsVocNodeExcludingHierarchy" type="EqualsVocNodeExcludingHierarchy"/>
                <xs:element name="equalsTerm" type="EqualsTerm"/>
                <xs:element name="equalsIncludeTransitiveReference" type="EqualsIncludeTransitiveReference"/>
                <xs:element name="greater" type="Greater"/>
                <xs:element name="greaterEquals" type="GreaterEquals"/>
                <xs:element name="isNotNull" type="IsNotNull"/>
                <xs:element name="isNull" type="IsNull"/>
                <xs:element name="isNotBlank" type="IsNotBlank"/>
                <xs:element name="isBlank" type="IsBlank"/>
                <xs:element name="less" type="Less"/>
                <xs:element name="lessEquals" type="LessEquals"/>
                <xs:element name="notEqualsField" type="NotEqualsField"/>
                <xs:element name="notEqualsVocNodeExcludingHierarchy" type="NotEqualsVocNodeExcludingHierarchy"/>
                <xs:element name="notEqualsTerm" type="NotEqualsTerm"/>
                <xs:element name="startsWithField" type="StartsWithField"/>
                <xs:element name="startsWithTerm" type="StartsWithTerm"/>
                <xs:element name="exists" type="Exists"/>
                <xs:element name="forAll" type="ForAll"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Not">
        <xs:choice>
            <xs:element name="and" type="And"/>
            <xs:element name="or" type="Or"/>
            <xs:element name="not" type="Not"/>
            <xs:element name="betweenIncl" type="BetweenIncl"/>
            <xs:element name="betweenExcl" type="BetweenExcl"/>
            <xs:element name="contains" type="Contains"/>
            <xs:element name="containsExact" type="ContainsExact"/>
            <xs:element name="endsWithField" type="EndsWithField"/>
            <xs:element name="endsWithTerm" type="EndsWithTerm"/>
            <xs:element name="equalsField" type="EqualsField"/>
            <xs:element name="equalsExact" type="EqualsExact"/>
            <xs:element name="equalsVocNodeExcludingHierarchy" type="EqualsVocNodeExcludingHierarchy"/>
            <xs:element name="equalsTerm" type="EqualsTerm"/>
            <xs:element name="equalsIncludeTransitiveReference" type="EqualsIncludeTransitiveReference"/>
            <xs:element name="greater" type="Greater"/>
            <xs:element name="greaterEquals" type="GreaterEquals"/>
            <xs:element name="isNotNull" type="IsNotNull"/>
            <xs:element name="isNull" type="IsNull"/>
            <xs:element name="isNotBlank" type="IsNotBlank"/>
            <xs:element name="isBlank" type="IsBlank"/>
            <xs:element name="less" type="Less"/>
            <xs:element name="lessEquals" type="LessEquals"/>
            <xs:element name="notEqualsField" type="NotEqualsField"/>
            <xs:element name="notEqualsVocNodeExcludingHierarchy" type="NotEqualsVocNodeExcludingHierarchy"/>
            <xs:element name="notEqualsTerm" type="NotEqualsTerm"/>
            <xs:element name="startsWithField" type="StartsWithField"/>
            <xs:element name="startsWithTerm" type="StartsWithTerm"/>
            <xs:element name="exists" type="Exists"/>
            <xs:element name="forAll" type="ForAll"/>
        </xs:choice>
    </xs:complexType>

    <!--
        The Exists quantifier is only supported for RepeatableGroups.
        All its sub expressions must only contain Fields of the RepeatableGroup
        the Exists Quantifier expression is used for.
        ...
        <exists fieldPath="ObjObjectTitleGrp">
            <and>
                <equalsField fieldPath="ObjObjectTitleGrp.InternetBoo" operand="true" />
                <isBlank fieldPath="ObjObjectTitleGrp.TitleTxt" />
            </and>
        </exists>
        ...
    -->
    <xs:complexType name="Exists">
        <xs:complexContent>
            <xs:extension base="Quantifier"/>
        </xs:complexContent>
    </xs:complexType>

    <!--
        The ForAll quantifier expression is only supported for RepeatableGroups.
        All its sub expressions must only contain Fields of the RepeatableGroup
        the ForAll Quantifier expression is used for.
        ...
        <forAll fieldPath="ObjObjectTitleGrp">
            <and>
                <equalsField fieldPath="ObjObjectTitleGrp.InternetBoo" operand="true" />
                <isBlank fieldPath="ObjObjectTitleGrp.TitleTxt" />
            </and>
        </forAll>
        ...
    -->
    <xs:complexType name="ForAll">
        <xs:complexContent>
            <xs:extension base="Quantifier"/>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="Quantifier">
        <xs:choice>
            <xs:element name="and" type="And"/>
            <xs:element name="or" type="Or"/>
            <xs:element name="not" type="Not"/>
            <xs:element name="betweenIncl" type="BetweenIncl"/>
            <xs:element name="betweenExcl" type="BetweenExcl"/>
            <xs:element name="contains" type="Contains"/>
            <xs:element name="containsExact" type="ContainsExact"/>
            <xs:element name="endsWithField" type="EndsWithField"/>
            <xs:element name="endsWithTerm" type="EndsWithTerm"/>
            <xs:element name="equalsField" type="EqualsField"/>
            <xs:element name="equalsExact" type="EqualsExact"/>
            <xs:element name="equalsVocNodeExcludingHierarchy" type="EqualsVocNodeExcludingHierarchy"/>
            <xs:element name="equalsTerm" type="EqualsTerm"/>
            <xs:element name="equalsIncludeTransitiveReference" type="EqualsIncludeTransitiveReference"/>
            <xs:element name="greater" type="Greater"/>
            <xs:element name="greaterEquals" type="GreaterEquals"/>
            <xs:element name="isNotNull" type="IsNotNull"/>
            <xs:element name="isNull" type="IsNull"/>
            <xs:element name="isNotBlank" type="IsNotBlank"/>
            <xs:element name="isBlank" type="IsBlank"/>
            <xs:element name="less" type="Less"/>
            <xs:element name="lessEquals" type="LessEquals"/>
            <xs:element name="notEqualsField" type="NotEqualsField"/>
            <xs:element name="notEqualsVocNodeExcludingHierarchy" type="NotEqualsVocNodeExcludingHierarchy"/>
            <xs:element name="notEqualsTerm" type="NotEqualsTerm"/>
            <xs:element name="startsWithField" type="StartsWithField"/>
            <xs:element name="startsWithTerm" type="StartsWithTerm"/>
        </xs:choice>
        <xs:attribute name="fieldPath" type="Path" use="required"/>
    </xs:complexType>

    <xs:complexType name="BetweenExcl">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand1" type="xs:string" use="required"/>
        <xs:attribute name="operand2" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="BetweenIncl">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand1" type="xs:string" use="required"/>
        <xs:attribute name="operand2" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="Contains">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="ContainsExact">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="EndsWithField">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="EndsWithTerm">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="EqualsField">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="EqualsExact">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="EqualsVocNodeExcludingHierarchy">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="EqualsTerm">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="EqualsIncludeTransitiveReference">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="Greater">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="GreaterEquals">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="IsNotNull">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
    </xs:complexType>

    <xs:complexType name="IsNull">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
    </xs:complexType>
    
    <xs:complexType name="IsNotBlank">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
    </xs:complexType>

    <xs:complexType name="IsBlank">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
    </xs:complexType>

    <xs:complexType name="Less">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="LessEquals">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="NotEqualsField">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="NotEqualsVocNodeExcludingHierarchy">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="NotEqualsTerm">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="StartsWithTerm">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="StartsWithField">
        <xs:attribute name="fieldPath" type="Path" use="required"/>
        <xs:attribute name="operand" type="xs:string" use="required"/>
    </xs:complexType>

    <!--
        A path is a dot separated list of segments. A segment represent
        a field, a repeatable group, a reference and so on. A path
        starts at module level. The path makes it easier do identifiy
        a field in the whole module structure. Lets assume we have a module
        'Artist' with a repeatable group 'Education' that has to fields
        'Organisation' and 'Years'. And the 'Artist' has a field 'Surname'.

        If you are looking for artists without a special 'Education' 'Organisation'
        you would use the NotEqualsField element with the
        fieldPath: "Education.Organisation".

        If you are looking for artists with a special 'Surname' you would use
        the EqualsField element with fieldPath: "Surname".

		3.9.2023 __orgUnit added by Maurice
    -->
    <xs:simpleType name="Path">
        <xs:restriction base="xs:string">
            <xs:pattern value="__orgUnit|__id|__lastModified|__lastModifiedUser|__created|__createdUser|[a-zA-Z][a-zA-Z0-9_$]*(\.[a-zA-Z][a-zA-Z0-9_$]*)*(\[[a-zA-Z][a-zA-Z0-9_$]*\]|\.(__attributes\.[a-zA-Z][a-zA-Z0-9_$]*|__id|__lastModified|__lastModifiedUser|__created|__createdUser|__parent(((\.[a-zA-Z][a-zA-Z0-9_$]*)+((\[[a-zA-Z][a-zA-Z0-9_$]*\]|(\.__attributes\.[a-zA-Z][a-zA-Z0-9_$]*))|\.__id|\.__lastModified|\.__lastModifiedUser|\.__created|\.__createdUser)?)|(\.(__id|__lastModified|__lastModifiedUser|__created|__createdUser)))?))?"/>
        </xs:restriction>
    </xs:simpleType>


</xs:schema>